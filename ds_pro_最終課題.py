# -*- coding: utf-8 -*-
"""DS_pro 最終課題

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z6nKIDqenYsgBjNRGW4ND7QgKJ9kWS9e
"""

import requests

url = "https://tenki.jp/past/2023/12/weather/3/15/47682/"

r= requests.get(url)

print(r.headers)

print(r.content)

import requests
from bs4 import BeautifulSoup

url="https://tenki.jp/past/2023/12/weather/3/15/47682/"

r = requests.get(url)

soup = BeautifulSoup(r.content, "html.parser")

elems = soup.find_all("a")
elems

import re
elems = soup.find_all(href=re.compile("/past/2024"))
elems

elems = soup.find_all(href=re.compile("/past/2024/01/01"))
elems

elems = soup.find_all(href=re.compile("/past/2023/12/31"))
elems

import sqlite3

!pwd

# DBファイルを保存するためのファイルパス

# Google Colab
path = '/content/'

# ローカル（自分のMac）
# path = '../db/'

# DBファイル名
db_name = 'DS_pro'

# DBに接続する（指定したDBファイル存在しない場合は，新規に作成される）
con = sqlite3.connect(path + db_name)

# DBへの接続を閉じる
con.close()

# 1．DBに接続する
con = sqlite3.connect(path + db_name)
# print(type(con))

# 2．SQLを実行するためのオブジェクトを取得
cur = con.cursor()

# 3．実行したいSQLを用意する
# テーブルを作成するSQL
# CREATE TABLE テーブル名（カラム名 型，...）;
sql_create_table_cars = 'CREATE TABLE weather(day, weather, high, low);'

# 4．SQLを実行する
cur.execute(sql_create_table_cars)

# 5．必要があればコミットする（データ変更等があった場合）
# 今回は必要なし

# 6．DBへの接続を閉じる
con.close()

# 1．DBに接続する
con = sqlite3.connect(path + db_name)
# print(type(con))

# 2．SQLを実行するためのオブジェクトを取得
cur = con.cursor()

# 3．SQLを用意
# データを挿入するSQL
# INSERT INTO テーブル名 VALUES (列に対応したデータをカンマ区切りで);
sql_insert_many = "INSERT INTO weather VALUES (?, ?, ?, ?);"

# データをリストで用意する
cars_list = [
    (1231, '雨のち雲', 12.4, 6.7),
    (101, '晴', 13.0, 8.9),
    (102, '雲のち雨', 9.7, 3.4),
    (103, '雲のち雨', 12.0, 3.6),
    (104, '雲のち晴', 15.5, 7.9),
    (105, '晴', 13.5, 3.8),
    (106, '晴', 15.7, 4.5),
]

# 4．SQLを実行
cur.executemany(sql_insert_many, cars_list)

# 5．コミット処理（データ操作を反映させる）
con.commit()

# 6．DBへの接続を閉じる
con.close()

# 1．DBに接続する
con = sqlite3.connect(path + db_name)
# print(type(con))

# 2．SQLを実行するためのオブジェクトを取得
cur = con.cursor()

# 3．SQLを用意
# SELECT * FROM テーブル名;
# *の部分は取得したい列の名前をカンマ区切りで指定することもできる
sql_select = 'SELECT * FROM weather;'

# 4．SQLを実行
cur.execute(sql_select)

for r in cur:
  print(r)

# 6．DBへの接続を閉じる
con.close()

from google.colab import drive

drive.mount('/content/drive')

import pandas as pd
data= pd.read_csv('/content/DS 資料 - シート1.csv')

data.head()

# 1．DBに接続する
con = sqlite3.connect(path + db_name)
# print(type(con))

# 2．SQLを実行するためのオブジェクトを取得
cur = con.cursor()

# 3．実行したいSQLを用意する
# テーブルを作成するSQL
# CREATE TABLE テーブル名（カラム名 型，...）;
sql_create_table_cars = 'CREATE TABLE iPhone(day, entertainment, creativity, utility, SNS, game, reading, total);'

# 4．SQLを実行する
cur.execute(sql_create_table_cars)

# 5．必要があればコミットする（データ変更等があった場合）
# 今回は必要なし

# 6．DBへの接続を閉じる
con.close()

# 1．DBに接続する
con = sqlite3.connect(path + db_name)
# print(type(con))

# 2．SQLを実行するためのオブジェクトを取得
cur = con.cursor()

# 3．SQLを用意
# データを挿入するSQL
# INSERT INTO テーブル名 VALUES (列に対応したデータをカンマ区切りで);
sql_insert_many = "INSERT INTO iPhone VALUES (?, ?, ?, ?, ?, ?, ?, ?);"

# データをリストで用意する
iPhone_list = [
    (1231, 792, 231, 74, 17, 8, 4, 1126),
    (101, 478, 2, 21, 33, 1, 0, 535),
    (102, 741, 154, 123, 140, 0, 0, 1158),
    (103, 826, 125, 122, 4, 0, 0, 1077),
    (104, 916, 0, 57, 28, 0, 26, 1027),
    (105, 953, 0, 79, 10, 0, 5, 1047),
    (106, 1103, 10, 56, 30, 0, 0, 1199),
]

# 4．SQLを実行
cur.executemany(sql_insert_many, iPhone_list)

# 5．コミット処理（データ操作を反映させる）
con.commit()

# 6．DBへの接続を閉じる
con.close()

# 1．DBに接続する
con = sqlite3.connect(path + db_name)
# print(type(con))

# 2．SQLを実行するためのオブジェクトを取得
cur = con.cursor()

# 3．SQLを用意
# SELECT * FROM テーブル名;
# *の部分は取得したい列の名前をカンマ区切りで指定することもできる
sql_select = 'SELECT * FROM iPhone;'

# 4．SQLを実行
cur.execute(sql_select)

for r in cur:
  print(r)

# 6．DBへの接続を閉じる
con.close()

